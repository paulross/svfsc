import datetime
import typing


class SVFS:

    # Returns ((file_position, length), ...)
    def blocks(self, id: str) -> typing.Tuple[typing.Tuple[int, int], ...]: ...

    def bytes_read(self, id: str) -> int: ...

    def bytes_write(self, id: str) -> int: ...

    def count_read(self, id: str) -> int: ...

    def count_write(self, id: str) -> int: ...

    def file_mod_time(self, id: str) -> float: ...

    def file_mod_time_matches(self, id: str) -> bool: ...

    def has(self, id: str) -> bool: ...

    def has_data(self, id: str, file_position: int, length: int) -> bool: ...

    def insert(self, id: str, mod_time: float) -> None: ...

    def keys(self) -> typing.List[str]: ...

    def need(self, id: str, file_position: int, length: int) -> typing.List[typing.Tuple[int, int], ...]: ...

    def num_blocks(self, id: str) -> int: ...

    def num_bytes(self, id: str) -> int: ...

    def read(self, id: str, file_position: int, length: int) -> bytes: ...

    def remove(self, id: str) -> None: ...

    def size_of(self, id: str) -> int: ...

    def time_read(self, id: str) -> datetime.datetime: ...

    def time_write(self, id: str) -> datetime.datetime: ...

    def total_blocks(self) -> int: ...

    def total_bytes(self) -> int: ...

    def total_size_of(self) -> int: ...

    def write(self, id: str, file_position: int, data: bytes) -> None: ...
