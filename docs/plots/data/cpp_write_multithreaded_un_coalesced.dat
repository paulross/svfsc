# Write 1Mb of test_data_bytes_512 in different, equally sized, blocks that are all coalesced and report the time taken.
# Essentially only one block is created and all the other test_data_bytes_512 is appended.
# $1   $2 $3 $4 $5 $6                                                            $7              $8              $9             $10             $11 $12
# Threads Function                                                             ----           Bytes              ms           ms/Mb            Mb/s Test
1   TestCount SVFS::test_write_multithreaded(int, bool, t_test_results &)      pass         1048576       38.437940          38.438            26.0 Multi threaded write [1] Coalesced 0
2   TestCount SVFS::test_write_multithreaded(int, bool, t_test_results &)      pass         2097152       49.335862          24.668            40.5 Multi threaded write [2] Coalesced 0
4   TestCount SVFS::test_write_multithreaded(int, bool, t_test_results &)      pass         4194304      122.608715          30.652            32.6 Multi threaded write [4] Coalesced 0
8   TestCount SVFS::test_write_multithreaded(int, bool, t_test_results &)      pass         8388608      149.127518          18.641            53.6 Multi threaded write [8] Coalesced 0
16  TestCount SVFS::test_write_multithreaded(int, bool, t_test_results &)      pass        16777216      108.220424           6.764           147.8 Multi threaded write [16] Coalesced 0
32  TestCount SVFS::test_write_multithreaded(int, bool, t_test_results &)      pass        33554432       92.078928           2.877           347.5 Multi threaded write [32] Coalesced 0
64  TestCount SVFS::test_write_multithreaded(int, bool, t_test_results &)      pass        67108864       92.798120           1.450           689.7 Multi threaded write [64] Coalesced 0
128 TestCount SVFS::test_write_multithreaded(int, bool, t_test_results &)      pass       134217728       91.640875           0.716          1396.8 Multi threaded write [128] Coalesced 0
